Modifications of the clang+llvm-3.3-i386-debian6.tar.bz2 download:

* bin/clang renamed to bin/clang.bin
* /proc/self/exe in bin/clang.bin changed to /proc/self/exE
* lib/clang/cur -> 3.3 symlink created
* added xstatic from
  http://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i686.tar.bz2
  2009-04-11
  gcc-4.1.2 (only ld added)
  uclibc-0.9.30.1
* xstatic/i486-linux-gnu/bin/ld renamed to ld.bin
* added binlib from Ubuntu Lucid
* added bin/clang trampoline binary
* added xstatic/i486-linux-gnu/bin/ld trampoline binary
* added linker
* added ld0.so
* renamed rpath directory

Developer info:

* clang doesn't add C++ header directories when compiling C code.
* Less than 100 bytes slower if using `static inline void *mymalloc(size_t size) {
  return sbrk((size + 15) & ~15); }'. Maybe uClibc uses malloc internally.
* http://llvm.org/releases/3.3/clang+llvm-3.3-i386-debian6.tar.bz2 doesn't
  contain crtbegin.o etc, we've fetched it from uClibc.
* `ld --eh-frame-hdr' is used by g++
* Moving ld from xstatic/i486-linux-gnu/bin to xstatic/i486-linux-gnu
  prevents clang from recognizing it.
* clang++ would find these include directories if they existed:
  xstatic/include/c++ and xstatic/include/c++/4.1 . It would find them as:
  xstatic/lib/gcc/i486-linux-gnu/4.1/../../../../include/c++/4.1 .
* With -gcc-toolchain, clang-static usr/lib/gcc/i486-linux-gnu/4.1 must not
  be a symlink, but 4.1.x or 4.1.y also works as a directory component; if
  that's missing, clang -gcc-toolchain wouldn't even find its ld;
  i386-linux-gnu can be a symlink. usr/lib/gcc/i486-linux-gnu can be a
  symlink, but it can't start with `../' . The 4.1 pathname component cannot
  be omitted. Not even gcc can be a symlink to ... .
* clang would find clanginclude as lib/clang/3.3/include automatically.
* `xstatic ~/d/clang/bin/clang -print-search-dirs' doesn't print
  `/home/pts/bin.local/../prg/xstatic/gccld', but
  `xstatic ~/d/clang/bin/clang -print-prog-name=ld' prints
  `/home/pts/bin.local/../prg/xstatic/gccld/ld'.
* `ld -nostdlib' is different from `gcc -nostdlib', the latter also prevents
  -lc.
* In addition to -B, the `ln -s . xstaticcld/i386-linux-gnu' symlink is
  needed by gcc (but not by clang) on Ubuntu Precise so it finds the right
  crt1.o gets found.
* If the only functions from libstdc++.a which you need are language support
  functions (those listed in clause 18 of the standard, e.g., new and
  delete), then try linking against libsupc++.a, which is a subset of
  libstdc++.a.
* clang always opens /etc/lsb-release, it's hardwired to DetectDistro,
  impossible to get rid of.
* crt*.o: http://dev.gentoo.org/~vapier/crt.txt
  General linking order:
  crt1.o crti.o crtbegin.o [-L paths] [user objects] [gcc libs] [C libs] [gcc libs] crtend.o crtn.o
  More references: http://gcc.gnu.org/onlinedocs/gccint/Initialization.html
* The shipped libstdc++ (and uclibcusr/c++include) is from GCC 4.4 (g++-4.4)
  so some newer C++0x or C++11 features may not be supported (see
  http://gcc.gnu.org/projects/cxx0x.html).
* cross-compiler-i686.tar.bz2 uses g++-4.1.2 the SJLJ exception handling ABI
  (__gcc_personality_sj0, _Unwind_* defined in libgcc.a). Most g++ compilers
  in Debian and Ubuntu (including g++-4.1) use the V0 exception handling ABI
  (__gcc_personality_v0, _Unwind_* defined in libgcc_eh.a). clang-3.0+ also
  uses V0. The xstatic libstdc++ was also compiled with V0, so it will work
  with most system compilers. For the g++-4.1.2 in
  cross-compiler-i686.tar.bz, you need to specify -fno-exceptions, otherwise
  you'll get an undefined symbol error for __gcc_personality_sj0.

TODOs for the current release:

* TODO(pts): Add constructor tests.
* TODO(pts): Add rtti test.
* TODO(pts): Add testing framework to run all the tests.
* TODO(pts): Create .7z for old and new uclibc libstdc++.
* TODO(pts): Create downloads, remove backup files.

TODOs for documentation:

* TODO(pts): Is LTO (link-time-optimization) enabled in gold by default? If
             not, how to enable it?
* TODO(pts): Write README.txt for all 3 projects.
* TODO(pts): Use TCC for C compilation speed comparisons.
* TODO(pts): Document how libstdc++ was compiled.
* TODO(pts): Create libstdc++ .patch.
* TODO(pts): Document minimum g++ version: 4.2. 4.1 gives too many errors.
             Does gcc-4.1 work? yes.
* TODO(pts): Document new conditions in usr/include/bits/cpp_type_traits.h,
*            usr/include/bits/builtin_type_traits.h,
*            and usr/include/limits and other libstdc++ changes.

TODOs for new features:

* TODO(pts): Add TCC compiler.
* TODO(pts): Use the linker in TCC as the mini linker. Constructors seem to
  be fine.
  It works, but the resulting C++ binaries are too large (hello.o linked
  becomes 1173252 bytes instead of 817206 bytes a.out, and `strip a.out'
  fails with `Bad value'), otherwise the program works.
* TODO(pts): Instead of ar and ranlib, build
  tcc-0.9.26/win32/tools/tiny_libmaker.c, make it able to use 32-bit and
  64-bit .o files. It also includes ranlib.
* TODO(pts): Add --oldcxx flag for 4.1 (which would use an old libstdc++). Does
             it work in 4.0?
* TODO(pts): Get rid of redundancy between xstatic.c and clang_trampoline.c.
* TODO(pts): Make multiple clang-... version coexist in bin and clanginclude.
* TODO(pts): Recompile or relink Clang 3.3 statically.
* TODO(pts): Does LM_CLANGLD need -lgcc? Which symbols?
* TODO(pts): Why is include_many.cc 160 bytes larger without -xsysld?
* TODO(pts): Upgrade the pts-clang-xstatic linker? It seems to work fine.
             What about linking speed?

__EOF__
