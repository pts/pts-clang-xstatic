Modifications of the clang+llvm-3.3-i386-debian6.tar.bz2 download:

* bin/clang renamed to bin/clang.bin
* /proc/self/exe in bin/clang.bin changed to /proc/self/exE
* lib/clang/cur -> 3.3 symlink created
* added xstatic from
  http://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i686.tar.bz2
  2009-04-11
  gcc-4.1.2 (only ld added)
  uclibc-0.9.30.1
* xstatic/i486-linux-gnu/bin/ld renamed to ld.bin
* added binlib from Ubuntu Lucid
* added bin/clang trampoline binary
* added xstatic/i486-linux-gnu/bin/ld trampoline binary
* added linker
* added ld0.so
* renamed rpath directory

Developer info:

* clang doesn't add C++ header directories when compiling C code.
* Less than 100 bytes slower if using `static inline void *mymalloc(size_t size) {
  return sbrk((size + 15) & ~15); }'. Maybe uClibc uses malloc internally.
* http://llvm.org/releases/3.3/clang+llvm-3.3-i386-debian6.tar.bz2 doesn't
  contain crtbegin.o etc, we've fetched it from uClibc.
* `ld --eh-frame-hdr' is used by g++
* Moving ld from xstatic/i486-linux-gnu/bin to xstatic/i486-linux-gnu
  prevents clang from recognizing it.
* clang++ would find these include directories if they existed:
  xstatic/include/c++ and xstatic/include/c++/4.1 . It would find them as:
  xstatic/lib/gcc/i486-linux-gnu/4.1/../../../../include/c++/4.1 .
* With -gcc-toolchain, clang-static usr/lib/gcc/i486-linux-gnu/4.1 must not
  be a symlink, but 4.1.x or 4.1.y also works as a directory component; if
  that's missing, clang -gcc-toolchain wouldn't even find its ld;
  i386-linux-gnu can be a symlink. usr/lib/gcc/i486-linux-gnu can be a
  symlink, but it can't start with `../' . The 4.1 pathname component cannot
  be omitted. Not even gcc can be a symlink to ... .
* clang would find clanginclude as lib/clang/3.3/include automatically.

TODOs:

* TODO(pts): Autodetect 3.3 in the clang cur symlink
* TODO(pts): Recompile or relink Clang 3.3 statically.
# TODO(pts): Make clang not open /etc/lsb-release (DetectDistro, impossible).
